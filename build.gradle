buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

/*
 * Gets the version name from the latest Git tag
 */
// https://stackoverflow.com/questions/28498688/gradle-script-to-autoversion-and-include-the-commit-hash-in-android
def getGitCommit = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

group = "ca.spottedleaf.${modid}"
version = "${mod_version}" + "+forge." + getGitCommit()
archivesBaseName = "${modid}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // add mixins
            arg "--mixin.config=" + modid + ".mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                starlight {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // add mixins
            arg "--mixin.config=" + modid + ".mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                starlight {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', '${modid}', '--all', '--output', file('src/generated/resources/')

            mods {
                starlight {
                    source sourceSets.main
                }
            }
        }
    }
}

jar {
    manifest {
        attributes([
                "Implementation-Title": "${modid}",
                "Implementation-Version": "${archiveVersion}",
                "Implementation-Vendor": "${modid}",
                "MixinConfigs": "${modid}.mixins.json",
                "MixinConnector":"ca.spottedleaf.starlight.mixin.MixinConnector"
        ])
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
}

mixin {
    add sourceSets.main, "${modid}.refmap.json"
}


processResources {
    filesMatching("**/mods.toml") {
        expand(
                'modid':project.property('modid'),
                'mod_version': project.property('mod_version'),
                'version': project.version,
                'forge_version': project.property('forge_version'),
                'forge_version_major': project.property('forge_version_major'),
                'mc_version': project.property('mc_version'),
                'mappings_channel': project.property('mappings_channel'),
                'mappings_version': project.property('mappings_version')
        )
    }
}

jar.finalizedBy('reobfJar')