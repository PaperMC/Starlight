plugins {
    id 'dev.architectury.loom' version '1.4-SNAPSHOT'
}

group = mod_group_id
version = "${mod_version}" + "+forge." + getGitCommit()

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

loom.forge.mixinConfig("starlight.mixins.json")

repositories {
    maven {
        name = 'MinecraftForge'
        url = 'https://maven.minecraftforge.net/'
    }
    maven {
        // Mirrors NeoForged & Fabric
        name = "Paper"
        url = 'https://repo.papermc.io/repository/maven-public/'
    }
    maven {
        name = "Parchment"
        url = "https://maven.parchmentmc.org/"
        mavenContent {
            includeGroup 'org.parchmentmc.data'
        }
    }
}

dependencies {
    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_ver}@zip")
    }
    minecraft "com.mojang:minecraft:${minecraft_version}"
    forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
}

// make build reproducible
tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
            version: version
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

loom.runs.all {
    // https://github.com/SpongePowered/Mixin/wiki/Mixin-Java-System-Properties
    vmArg("-Dmixin.debug=true")
}

/*
 * Gets the version name from the latest Git tag
 */
// https://stackoverflow.com/questions/28498688/gradle-script-to-autoversion-and-include-the-commit-hash-in-android
def getGitCommit() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
